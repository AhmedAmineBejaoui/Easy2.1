import { motion } from "framer-motion";
import { Link } from "wouter";
import { ArrowLeft, MessageCircle, Palette, Hammer, Sparkles, CheckCircle, Clock } from "lucide-react";
import { useTranslation } from "react-i18next";
import Navigation from "@/components/navigation";
import Footer from "@/components/footer";

const processImages = [
  '1586023492125-27b2c045efd7',
  '1618221195710-dd6b41faaea6',
  '1507089947368-19c1da9775ae',
  '1606744824163-985d376605aa',
  '1503174971373-b1f69850bded'
];

export default function ProcessPage() {
  const { t } = useTranslation();

  const processSteps = [
    {
      step: "01",
      icon: MessageCircle,
      title: t('processPage.step1Title'),
      duration: t('processPage.step1Duration'),
      description: t('processPage.step1Description'),
      details: [
        t('processPage.step1Detail1'),
        t('processPage.step1Detail2'),
        t('processPage.step1Detail3'),
        t('processPage.step1Detail4'),
        t('processPage.step1Detail5')
      ]
    },
    {
      step: "02",
      icon: Palette,
      title: t('processPage.step2Title'),
      duration: t('processPage.step2Duration'),
      description: t('processPage.step2Description'),
      details: [
        t('processPage.step2Detail1'),
        t('processPage.step2Detail2'),
        t('processPage.step2Detail3'),
        t('processPage.step2Detail4'),
        t('processPage.step2Detail5')
      ]
    },
    {
      step: "03",
      icon: CheckCircle,
      title: t('processPage.step3Title'),
      duration: t('processPage.step3Duration'),
      description: t('processPage.step3Description'),
      details: [
        t('processPage.step3Detail1'),
        t('processPage.step3Detail2'),
        t('processPage.step3Detail3'),
        t('processPage.step3Detail4'),
        t('processPage.step3Detail5')
      ]
    },
    {
      step: "04",
      icon: Hammer,
      title: t('processPage.step4Title'),
      duration: t('processPage.step4Duration'),
      description: t('processPage.step4Description'),
      details: [
        t('processPage.step4Detail1'),
        t('processPage.step4Detail2'),
        t('processPage.step4Detail3'),
        t('processPage.step4Detail4'),
        t('processPage.step4Detail5')
      ]
    },
    {
      step: "05",
      icon: Sparkles,
      title: t('processPage.step5Title'),
      duration: t('processPage.step5Duration'),
      description: t('processPage.step5Description'),
      details: [
        t('processPage.step5Detail1'),
        t('processPage.step5Detail2'),
        t('processPage.step5Detail3'),
        t('processPage.step5Detail4'),
        t('processPage.step5Detail5')
      ]
    }
  ];

  const faq = [
    {
      question: t('processPage.faq1Question'),
      answer: t('processPage.faq1Answer')
    },
    {
      question: t('processPage.faq2Question'),
      answer: t('processPage.faq2Answer')
    },
    {
      question: t('processPage.faq3Question'),
      answer: t('processPage.faq3Answer')
    },
    {
      question: t('processPage.faq4Question'),
      answer: t('processPage.faq4Answer')
    }
  ];
  return (
    <div className="min-h-screen bg-studio-warm-bg">
      <Navigation />
      
      {/* Hero Section */}
      <section className="pt-32 pb-20 bg-studio-warm-bg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <Link href="/">
            <button className="flex items-center gap-2 text-studio-primary hover:text-studio-accent transition-colors duration-300 mb-8">
              <ArrowLeft size={20} />
              {t('processPage.backToHome')}
            </button>
          </Link>
          
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center max-w-4xl mx-auto"
          >
            <div className="mb-6">
              <span className="inline-block px-6 py-2 bg-studio-primary text-white text-sm font-medium tracking-wide uppercase rounded-full">
                {t('processPage.badge')}
              </span>
            </div>
            <h1 className="font-heading text-5xl sm:text-6xl lg:text-7xl font-normal text-studio-primary mb-8 tracking-tight leading-tight">
              {t('processPage.heading')} <span className="italic font-bold">{t('processPage.headingAccent')}</span>
            </h1>
            <p className="text-xl text-studio-text-light leading-relaxed max-w-3xl mx-auto">
              {t('processPage.description')}
            </p>
          </motion.div>
        </div>
      </section>

      {/* Process Steps */}
      <section className="py-20 bg-background">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="space-y-20">
            {processSteps.map((step, index) => {
              const IconComponent = step.icon;
              return (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.8, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  className={`grid lg:grid-cols-2 gap-16 items-center ${index % 2 === 1 ? 'lg:grid-cols-2' : ''}`}
                >
                  <div className={`${index % 2 === 1 ? 'lg:order-2' : ''}`}>
                    <div className="flex items-center gap-4 mb-6">
                      <div className="text-6xl font-bold text-studio-neutral">{step.step}</div>
                      <div className="w-16 h-16 bg-studio-primary rounded-2xl flex items-center justify-center">
                        <IconComponent className="text-white" size={32} />
                      </div>
                    </div>
                    
                    <h3 className="font-heading text-3xl sm:text-4xl font-normal text-studio-primary mb-4">
                      {step.title}
                    </h3>
                    
                    <div className="flex items-center gap-2 mb-6">
                      <Clock size={16} className="text-studio-accent" />
                      <span className="text-studio-accent font-medium">{step.duration}</span>
                    </div>
                    
                    <p className="text-lg text-studio-text-light mb-8 leading-relaxed">
                      {step.description}
                    </p>
                    
                    <ul className="space-y-3">
                      {step.details.map((detail, idx) => (
                        <li key={idx} className="flex items-start gap-3">
                          <CheckCircle size={20} className="text-studio-accent mt-0.5 flex-shrink-0" />
                          <span className="text-studio-text-light">{detail}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className={`${index % 2 === 1 ? 'lg:order-1' : ''}`}>
                    <div className="relative">
                      <img
                        src={`https://images.unsplash.com/photo-${processImages[index]}?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600`}
                        alt={`${step.title} process`}
                        className="w-full h-[500px] object-cover rounded-3xl"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-studio-primary/20 to-transparent rounded-3xl"></div>
                      
                      {/* Floating step number */}
                      <div className="absolute top-8 left-8 w-16 h-16 bg-background rounded-2xl flex items-center justify-center shadow-soft">
                        <span className="text-2xl font-bold text-studio-primary">{step.step}</span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>
        </div>
      </section>

      {/* Timeline Overview */}
      <section className="py-20 bg-studio-neutral">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="font-heading text-4xl sm:text-5xl font-normal text-studio-primary mb-6">
              {t('processPage.timelineHeading')} <span className="italic font-bold">{t('processPage.timelineHeadingAccent')}</span>
            </h2>
            <p className="text-lg text-studio-text-light max-w-3xl mx-auto">
              {t('processPage.timelineDescription')}
            </p>
          </motion.div>

          <div className="bg-card rounded-3xl p-12 shadow-soft">
            <div className="grid md:grid-cols-5 gap-8">
              {processSteps.map((step, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  className="text-center"
                >
                  <div className="w-16 h-16 bg-studio-primary rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <step.icon className="text-white" size={24} />
                  </div>
                  <h3 className="font-semibold text-studio-primary mb-2">{step.title}</h3>
                  <p className="text-studio-accent text-sm font-medium">{step.duration}</p>
                </motion.div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* FAQ */}
      <section className="py-20 bg-background">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="font-heading text-4xl sm:text-5xl font-normal text-studio-primary mb-6">
              {t('processPage.faqHeading')} <span className="italic font-bold">{t('processPage.faqHeadingAccent')}</span>
            </h2>
            <p className="text-lg text-studio-text-light">
              {t('processPage.faqDescription')}
            </p>
          </motion.div>

          <div className="space-y-6">
            {faq.map((item, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
                className="bg-studio-neutral p-8 rounded-3xl"
              >
                <h3 className="text-xl font-semibold text-studio-primary mb-4">{item.question}</h3>
                <p className="text-studio-text-light leading-relaxed">{item.answer}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA */}
      <section className="py-20 bg-studio-primary text-white">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="font-heading text-4xl sm:text-5xl font-normal mb-6">
              {t('processPage.ctaHeading')} <span className="italic font-bold">{t('processPage.ctaHeadingAccent')}</span>?
            </h2>
            <p className="text-xl text-white/80 mb-8 max-w-2xl mx-auto">
              {t('processPage.ctaDescription')}
            </p>
            <Link href="/#contact">
              <button className="bg-background text-studio-primary hover:bg-studio-neutral px-8 py-4 text-lg font-medium hover-lift rounded-full transition-all duration-300">
                {t('processPage.ctaButton')}
              </button>
            </Link>
          </motion.div>
        </div>
      </section>

      <Footer />
    </div>
  );
}